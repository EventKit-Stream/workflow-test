name: "🚀 Release: Validate, Build, and Publish"

on:
  release:
    types: [published]
    # NOTE: The release event does not support branch filters in the trigger.
    # We gate to main via a job-level condition: github.event.release.target_commitish == 'main'.

concurrency:
  group: release-${{ github.event.release.tag_name || github.sha }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1) Check target branch and prerelease (if not main, must be prerelease)
  target-check:
    name: "🔍 Check target branch and prerelease"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      mismatch: ${{ steps.mismatch.outputs.mismatch }}
      reason: ${{ steps.mismatch.outputs.reason }}
    steps:
      - name: "🔀 Check target and prerelease"
        id: mismatch
        shell: bash
        run: |
          TARGET="${{ github.event.release.target_commitish }}"
          REL_PRE="${{ github.event.release.prerelease }}"
          if [[ "$TARGET" != "main" && "$REL_PRE" == "false" ]]; then
            echo "mismatch=true" >> $GITHUB_OUTPUT
            echo "reason=target not main and not prerelease" >> $GITHUB_OUTPUT
            echo "::error::Target branch is not main and release is not prerelease. Will rollback."
            exit 1
          else
            echo "mismatch=false" >> $GITHUB_OUTPUT
            echo "reason=" >> $GITHUB_OUTPUT
          fi

  # 1b) Rollback if target/check failed
  rollback-target-check:
    name: "⏪ Rollback target/check mismatch"
    needs: target-check
    # if: needs.target-check.result == 'failure'
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "🔧 Set up rollback variables"
        shell: bash
        run: |
          set -euo pipefail
          echo "API=https://api.github.com" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "REL_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
          echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      - name: "🔄 Roll back release to draft"
        shell: bash
        run: |
          echo "Reverting release $REL_ID to draft..."
          curl -sS -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$API/repos/$REPO/releases/$REL_ID" \
            -d '{"draft":true}'

      - name: "🗑️ Deleting tag"
        shell: bash
        run: |
          echo "Deleting tag refs/tags/$TAG_NAME..."
          curl -sS -X DELETE \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$API/repos/$REPO/git/refs/tags/$TAG_NAME"

      - name: "❌ Fail due to validation mismatch"
        run: |
          echo "::error::Validation failed: ${{ needs.target-check.outputs.reason }}. Release reverted to draft and tag removed.";

  # 2) Validate version and prerelease parity
  version-validation:
    name: "🧪 Validate version and prerelease parity"
    needs: target-check
    if: needs.target-check.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.out.outputs.version }}
      prerelease: ${{ steps.out.outputs.prerelease }}
      mismatch: ${{ steps.mismatch.outputs.mismatch }}
      reason: ${{ steps.mismatch.outputs.reason }}
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4

      - name: "🔎 Parse SemVer from tag"
        id: tag_version
        uses: ChrSchu90/GitTagSemanticVersion@v1.1
        with:
          tag: ${{ format('refs/tags/{0}', github.event.release.tag_name) }}

      - name: "🧮 Verify package.json matches tag"
        id: version_check
        shell: bash
        run: |
          PKG_VERSION=$(grep -oP '"version"\s*:\s*"\K[^"]+' package.json)
          echo "package.json version: $PKG_VERSION"
          echo "tag package version: ${{ steps.tag_version.outputs.package }}"
          if [[ "$PKG_VERSION" != "${{ steps.tag_version.outputs.package }}" ]]; then
            echo "ver_mismatch=true" >> $GITHUB_OUTPUT
            echo "::warning::Tag version (${{ steps.tag_version.outputs.package }}) does not match package.json ($PKG_VERSION). Will revert if this is a Release event."
          else
            echo "ver_mismatch=false" >> $GITHUB_OUTPUT
          fi

      - name: "🔀 Check prerelease parity (release vs tag)"
        if: github.event_name == 'release'
        id: precheck
        shell: bash
        run: |
          REL_PRE="${{ github.event.release.prerelease }}"
          TAG_PRE="${{ steps.tag_version.outputs.is_prerelease }}"
          echo "Release prerelease: $REL_PRE"
          echo "Tag is_prerelease: $TAG_PRE"
          REL_PRE_N=$(echo "$REL_PRE" | tr '[:upper:]' '[:lower:]')
          TAG_PRE_N=$(echo "$TAG_PRE" | tr '[:upper:]' '[:lower:]')
          if [[ "$REL_PRE_N" != "$TAG_PRE_N" ]]; then
            echo "mismatch=true" >> $GITHUB_OUTPUT
            echo "::warning::Release prerelease flag ($REL_PRE_N) does not match tag prerelease ($TAG_PRE_N). Will revert release to draft and delete tag."
          else
            echo "mismatch=false" >> $GITHUB_OUTPUT
          fi

      - name: "🧩 Summarize validation mismatches"
        id: mismatch
        shell: bash
        run: |
          PRE_MISMATCH="${{ steps.precheck.outputs.mismatch }}"
          VER_MISMATCH="${{ steps.version_check.outputs.ver_mismatch }}"
          MISMATCH="false"
          REASON=""
          if [[ "$VER_MISMATCH" == "true" ]]; then
            MISMATCH="true"
            REASON="package.json version mismatch"
          fi
          if [[ "$PRE_MISMATCH" == "true" ]]; then
            MISMATCH="true"
            if [[ -n "$REASON" ]]; then REASON="$REASON; "; fi
            REASON="${REASON}prerelease mismatch"
          fi
          echo "mismatch=$MISMATCH" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT

      - name: "❌ Fail if mismatch"
        if: steps.mismatch.outputs.mismatch == 'true'
        run: exit 1

      - name: "📤 Export version outputs"
        id: out
        shell: bash
        run: |
          echo "version=${{ steps.tag_version.outputs.package }}" >> $GITHUB_OUTPUT
          echo "prerelease=${{ steps.tag_version.outputs.is_prerelease }}" >> $GITHUB_OUTPUT

  # 2b) Rollback if version validation failed
  rollback-version-validation:
    name: "⏪ Rollback version validation mismatch"
    needs: version-validation
    # if: needs.version-validation.result == 'failure'
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "🔧 Set up rollback variables"
        shell: bash
        run: |
          set -euo pipefail
          echo "API=https://api.github.com" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "REL_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
          echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      - name: "🔄 Roll back release to draft"
        shell: bash
        run: |
          echo "Reverting release $REL_ID to draft..."
          curl -sS -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$API/repos/$REPO/releases/$REL_ID" \
            -d '{"draft":true}'

      - name: "🗑️ Deleting tag"
        shell: bash
        run: |
          echo "Deleting tag refs/tags/$TAG_NAME..."
          curl -sS -X DELETE \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$API/repos/$REPO/git/refs/tags/$TAG_NAME"

      - name: "❌ Fail due to validation mismatch"
        run: |
          echo "::error::Validation failed: ${{ needs.version-validation.outputs.reason }}. Release reverted to draft and tag removed."; exit 1;

  # 3) Build and publish a container image to GHCR using the validated version.
  docker:
    name: "🐳 Build and publish Docker image (GHCR)"
    needs: version-validation
    if: needs.version-validation.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Log in to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🔡 Compute lowercase image name"
        id: lc
        shell: bash
        run: |
          echo "name=${{ env.REGISTRY }}/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: "🏷️ Generate image tags and labels"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.lc.outputs.name }}
          tags: |
            type=raw,value=${{ needs.version-validation.outputs.version }},prefix=v
            type=raw,value=latest,enable=${{ needs.version-validation.outputs.prerelease == 'false' }}

      - name: "🚚 Build and push image"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 4) Publish the package to GitHub Packages (npm registry on GitHub).
  npm-GH:
    name: "📦 Publish to GitHub Packages (npm)"
    needs: version-validation
    if: needs.version-validation.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4

      - name: "🟢 Use Node.js 20 (GitHub Packages)"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@eventkit-stream'

      - name: "🥖 Set up Bun"
        uses: oven-sh/setup-bun@v2

      - name: "📦 Install dependencies"
        run: bun install

      - name: "🛠️ Build package"
        run: bun run build

      - name: "🚀 Publish to GitHub Packages"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ needs.version-validation.outputs.prerelease }}" == "true" ]]; then
            npm publish --tag next
          else
            npm publish --tag latest
          fi

  # 5) Publish the package to npmjs.com (public npm registry).
  npm-JS:
    name: "📦 Publish to npmjs.com (npm)"
    needs: version-validation
    if: needs.version-validation.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4

      - name: "🟢 Use Node.js 20 (npmjs)"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: "🥖 Set up Bun"
        uses: oven-sh/setup-bun@v2

      - name: "📦 Install dependencies"
        run: bun install

      - name: "🛠️ Build package"
        run: bun run build

      - name: "🚀 Publish to npm registry (npmjs.com)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ "${{ needs.version-validation.outputs.prerelease }}" == "true" ]]; then
            npm publish --provenance --access public --tag next
          else
            npm publish --provenance --access public --tag latest
          fi