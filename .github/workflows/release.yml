name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published, prereleased]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to release (e.g., v1.2.3)'
        required: false

concurrency:
  group: release-${{ github.ref_name || github.event.release.tag_name || github.sha }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version-validation:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.out.outputs.version }}
      prerelease: ${{ steps.out.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse tag with Git Tag Semantic Version
        id: tagver
        uses: ChrSchu90/GitTagSemanticVersion@v1.1
        with:
          tag: ${{ github.event_name == 'release' && format('refs/tags/{0}', github.event.release.tag_name) || (inputs.tag != '' && format('refs/tags/{0}', inputs.tag) || github.ref) }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure package.json matches tag version
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "package.json version: $PKG_VERSION"
          echo "tag package version: ${{ steps.tagver.outputs.package }}"
          if [[ "$PKG_VERSION" != "${{ steps.tagver.outputs.package }}" ]]; then
            echo "::error::Tag version (${{ steps.tagver.outputs.package }}) does not match package.json ($PKG_VERSION)"; exit 1;
          fi

      - name: Ensure Release prerelease matches tag prerelease
        if: github.event_name == 'release'
        shell: bash
        run: |
          REL_PRE="${{ github.event.release.prerelease }}"
          TAG_PRE="${{ steps.tagver.outputs.is_prerelease }}"
          echo "Release prerelease: $REL_PRE"
          echo "Tag is_prerelease: $TAG_PRE"
          # Normalize to 'true'/'false'
          REL_PRE_N=$(echo "$REL_PRE" | tr '[:upper:]' '[:lower:]')
          TAG_PRE_N=$(echo "$TAG_PRE" | tr '[:upper:]' '[:lower:]')
          if [[ "$REL_PRE_N" != "$TAG_PRE_N" ]]; then
            echo "::error::Release prerelease flag ($REL_PRE_N) does not match tag prerelease ($TAG_PRE_N)."; exit 1;
          fi

      - name: Set outputs (version, prerelease)
        id: out
        shell: bash
        run: |
          echo "version=${{ steps.tagver.outputs.package }}" >> $GITHUB_OUTPUT
          echo "prerelease=${{ steps.tagver.outputs.is_prerelease }}" >> $GITHUB_OUTPUT

  docker:
    name: Build and Publish Docker Image
    needs: version-validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lower-case image name
        id: lc
        shell: bash
        run: |
          echo "name=${{ env.REGISTRY }}/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.lc.outputs.name }}
          tags: |
            type=raw,value=${{ needs.version-validation.outputs.version }},prefix=v
            type=raw,value=latest,enable=${{ needs.version-validation.outputs.prerelease == 'false' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  npm:
    name: Publish GitHub Package (npm)
    needs: version-validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js for npm publish
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@eventkit-stream'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install deps
        run: bun install

      - name: Build package
        run: bun run build

      - name: Publish package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ needs.version-validation.outputs.prerelease }}" == "true" ]]; then
            npm publish --tag next || npm publish --tag next
          else
            npm publish --tag latest || npm publish --tag latest
          fi
